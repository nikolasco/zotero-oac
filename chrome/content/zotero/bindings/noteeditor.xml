<?xml version="1.0"?>
<!--
    ***** BEGIN LICENSE BLOCK *****
    
    Copyright (c) 2006  Center for History and New Media
                        George Mason University, Fairfax, Virginia, USA
                        http://chnm.gmu.edu
    
    Licensed under the Educational Community License, Version 1.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
    http://www.opensource.org/licenses/ecl1.php
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    
    ***** END LICENSE BLOCK *****
-->
<bindings 	xmlns="http://www.mozilla.org/xbl"
			xmlns:xbl="http://www.mozilla.org/xbl"
			xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	
	<binding id="note-editor">
		<resources>
			<stylesheet src="chrome://zotero/skin/bindings/noteeditor.css"/>
		</resources>
		
		<implementation>
			<field name="itemRef">null</field>
			<property name="item" onget="return this.itemRef;">
				<setter>
					<![CDATA[
						this.itemRef = val;
						
						var citeLabel = this.id('citeLabel');
						if(citeLabel.firstChild)
							citeLabel.removeChild(citeLabel.firstChild);
						
						if(this.item && !this.getAttribute('notitle')=='1')
						{
							citeLabel.appendChild(document.createTextNode(this.item.getField('title')));
						}
					]]>
				</setter>
			</property>
			<field name="noteRef">null</field>
			<property name="note" onget="return this.noteRef;">
				<setter>
					<![CDATA[
						var scrollPos = this.id('noteField').inputField.scrollTop;
						
						this.noteRef = val;
						
						if(this.note.getSource())
							this.item = Zotero.Items.get(this.note.getSource());
						
						this.id('noteField').value = this.note.getNote();
						this.id('links').item = this.note;
						
						this.id('noteField').inputField.scrollTop = scrollPos;
					]]>
				</setter>
			</property>
			<field name="collectionRef">null</field>
			<property name="collection" onget="return this.collectionRef;" onset="this.collectionRef = val;"/>
			<property name="value" onget="return this.id('noteField').value;" onset="this.id('noteField').value = val;"/>
			<method name="save">
				<body>
					<![CDATA[
						var noteField = this.id('noteField');
						if(this.note)	//Update note
						{
							this.note.updateNote(noteField.value);
						}
						else	//Create new note
					 	{
							if(this.item)
								var noteID = Zotero.Notes.add(noteField.value,this.item.getID());	//attached to an item
							else
							{
								//independent note
								var noteID = Zotero.Notes.add(noteField.value);
								if(this.collection)
									this.collection.addItem(noteID);
							}
							this.note = Zotero.Items.get(noteID);
						}
					]]>
				</body>
			</method>
			
			<method name="handleKeyDown">
				<parameter name="event"/>
				<body>
				<![CDATA[
					switch (event.keyCode) {
						// Insert tab manually
						case 9:
							if (event.shiftKey || event.ctrlKey || event.altKey) {
								return;
							}
							// From http://kb.mozillazine.org/Inserting_text_at_cursor
							try {
								var command = "cmd_insertText";
								var controller = document.commandDispatcher.getControllerForCommand(command);
								if (controller && controller.isCommandEnabled(command)) {
									controller = controller.QueryInterface(Components.interfaces.nsICommandController);
									var params = Components.classes["@mozilla.org/embedcomp/command-params;1"]
									.createInstance(Components.interfaces.nsICommandParams);
									params.setStringValue("state_data", "\t");
									controller.doCommandWithParams(command, params);
								}
							}
							catch (e) {
								Zotero.debug("Can't do cmd_insertText!\n" + e, 1);
							}
							
							event.stopPropagation();
							event.preventDefault();
							
							// DEBUG: is there a better way to prevent blur()?
							setTimeout(function() { event.target.focus(); }, 1);
							break;
					}
				]]>
				</body>
			</method>
			
			<method name="focus">
				<body>
					<![CDATA[
						this.id('noteField').focus();
					]]>
				</body>
			</method>
			
			<method name="selectParent">
				<body>
				<![CDATA[
					if (!this.item.getID()) {
						return;
					}
					
					if (document.getElementById('zotero-pane')) {
						var zp = ZoteroPane;
					}
					else {
						var wm = Components.classes["@mozilla.org/appshell/window-mediator;1"]
									   .getService(Components.interfaces.nsIWindowMediator);
						
						var lastWin = wm.getMostRecentWindow("navigator:browser");
						
						if (!lastWin) {
							window.open();
							var newWindow = wm.getMostRecentWindow("navigator:browser");
							var b = newWindow.getBrowser();
							return;
						}
						
						if (lastWin.document.getElementById('zotero-pane').getAttribute('hidden') == 'true') {
							lastWin.ZoteroPane.toggleDisplay();
							
							// DEBUG: The actions below seem to crash Firefox 2.0.0.1 on OS X if
							// the Z pane isn't already open, so we don't try
							return;
						}
						
						var zp = lastWin.ZoteroPane;
					}
					
					zp.clearQuicksearch();
					zp.selectItem(this.item.getID());
				]]>
				</body>
			</method>
			
			<method name="id">
				<parameter name="id"/>
				<body>
					<![CDATA[
						return document.getAnonymousNodes(this)[0].getElementsByAttribute('id',id)[0];
					]]>
				</body>
			</method>
		</implementation>
		
		<content>
			<xul:vbox xbl:inherits="flex">
				<xul:label id="citeLabel" onclick="document.getBindingParent(this).selectParent()"/>
				<xul:textbox id="noteField" multiline="true" type="timed" timeout="1000" flex="1" onkeydown="document.getBindingParent(this).handleKeyDown(event)" oncommand="document.getBindingParent(this).save();"/>
				<xul:hbox>
					<xul:linksbox id="links" flex="1"/>
				</xul:hbox>
			</xul:vbox>
		</content>
	</binding>
	
	<binding id="links-box">
		<implementation>
			<field name="itemRef"/>
			<property name="item" onget="return this.itemRef;">
				<setter>
					<![CDATA[
						this.itemRef = val;
						
						this.id('tags').item = this.item;
						this.updateTagsSummary();
						this.id('seeAlso').item = this.item;
						this.updateSeeAlsoSummary();
					]]>
				</setter>
			</property>
			<method name="tagsClick">
				<body>
					<![CDATA[
						this.id('tags').reload();
						this.id('tagsPopup').showPopup(this.id('tagsLabel'),-1,-1,'popup');
					]]>
				</body>
			</method>
			<method name="updateTagsSummary">
				<body>
					<![CDATA[
						// TODO: localize
						var v = this.id('tags').summary;
						
						if (!v || v == "") {
							v = "[" + Zotero.getString('pane.item.noteEditor.clickHere') + "]";
						}
							
						this.id('tagsLabel').value = Zotero.getString('pane.item.tags') + " " + v;
					]]>
				</body>
			</method>
			<method name="seeAlsoClick">
				<body>
					<![CDATA[
						var seealsoList = this.item.getSeeAlso();
						if(seealsoList && seealsoList.length > 0)
							this.id('seeAlsoPopup').showPopup(this.id('seeAlsoLabel'),-1,-1,'popup',0,0);
						else
							this.id('seeAlso').add();
					]]>
				</body>
			</method>
			<method name="updateSeeAlsoSummary">
				<body>
					<![CDATA[
						var v = this.id('seeAlso').summary;
						
						if (!v || v == "") {
							v = "[" + Zotero.getString('pane.item.noteEditor.clickHere') + "]";
						}
						
						this.id('seeAlsoLabel').value = Zotero.getString('pane.item.related') + " " + v;
					]]>
				</body>
			</method>
			<method name="id">
				<parameter name="id"/>
				<body>
					<![CDATA[
						return document.getAnonymousNodes(this)[0].getElementsByAttribute('id',id)[0];
					]]>
				</body>
			</method>
		</implementation>
		<content>
			<xul:vbox xbl:inherits="flex">
				<xul:label id="seeAlsoLabel" class="zotero-clicky" crop="end" onclick="this.parentNode.parentNode.seeAlsoClick();"/>
				<xul:label id="tagsLabel" class="zotero-clicky" crop="end" onclick="this.parentNode.parentNode.tagsClick();"/>
				<xul:popupset>
					<xul:popup id="seeAlsoPopup" width="300" onpopupshowing="this.firstChild.reload();">
						<xul:seealsobox id="seeAlso" flex="1"/>
					</xul:popup>
					<!-- The onpopup* stuff is an ugly hack to keep track of when the
					popup is open (and not the descendent autocomplete popup, which also
					seems to get triggered by these events for reasons that are less than
					clear) so that we can manually refresh the popup if it's open after
					autocomplete is used to prevent it from becoming unresponsive
					
					Note: Code in tagsbox.xml is dependent on the DOM path between the
					tagsbox and tagsLabel above, so be sure to update fixPopup() if it changes
					-->
					<xul:popup id="tagsPopup" ignorekeys="true" width="300"
							onpopupshown="if (!document.commandDispatcher.focusedElement || document.commandDispatcher.focusedElement.tagName=='xul:label'){ /* DEBUG: it would be nice to make this work -- if (this.firstChild.count==0){ this.firstChild.new(); } */ this.setAttribute('showing', 'true'); }"
							onpopuphidden="if (!document.commandDispatcher.focusedElement || document.commandDispatcher.focusedElement.tagName=='xul:label'){ this.setAttribute('showing', 'false'); }">
						<xul:tagsbox id="tags" flex="1"/>
					</xul:popup>
				</xul:popupset>
			</xul:vbox>
		</content>
	</binding>
</bindings>