<?xml version="1.0"?>
<!--
    ***** BEGIN LICENSE BLOCK *****
    
    Copyright (c) 2006  Center for History and New Media
                        George Mason University, Fairfax, Virginia, USA
                        http://chnm.gmu.edu
    
    Licensed under the Educational Community License, Version 1.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
    http://www.opensource.org/licenses/ecl1.php
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    
    ***** END LICENSE BLOCK *****
-->
<?xml-stylesheet href="chrome://zotero/skin/overlay.css" type="text/css"?>
<!DOCTYPE bindings SYSTEM "chrome://zotero/locale/zotero.dtd">

<bindings xmlns="http://www.mozilla.org/xbl"
		  xmlns:xbl="http://www.mozilla.org/xbl"
		  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

	<binding id="tag-selector">
		<resources>
			<stylesheet src="chrome://zotero/skin/bindings/tagselector.css"/>
		</resources>
		
		<implementation>
			<field name="selection"/>
			
			<constructor>
				<![CDATA[
					this.init();
				]]>
			</constructor>
			
			<method name="init">
				<body>
					<![CDATA[
						this.selection = {};
						this.setTagList(Zotero.Tags.getAll());
					]]>
				</body>
			</method>
			
			<method name="setTagList">
				<parameter name="tags"/>
				<body>
					<![CDATA[
						var tagsToggleDiv = this.id('tags-toggle');
						
						// Save selection
						var labels = tagsToggleDiv.getElementsByTagName('label');
						for (var i=0; i<labels.length; i++){
							//this.selection[labels[i].value] = labels[i].getAttribute('selected')=='true';
						}
						
						// Remove children
						while (tagsToggleDiv.hasChildNodes()){
							tagsToggleDiv.removeChild(tagsToggleDiv.firstChild);
						}
						
						// Regenerate list
						for (var tagID in tags){
							var label = document.createElement('label');
							label.setAttribute('onclick', "this.parentNode.parentNode.parentNode.handleTagClick(this)");
							label.className = 'zotero-clicky';
							label.setAttribute('value', tags[tagID]);
							tagsToggleDiv.appendChild(label);
						}
						
						// Restore selection
						var labels = tagsToggleDiv.getElementsByTagName('label');
						for (var i=0; i<labels.length; i++){
							if (this.selection[labels[i].value]){
								labels[i].setAttribute('selected', 'true');
							}
						}
						
						this.doCommand();
					]]>
				</body>
			</method>
			
			<method name="selectVisible">
				<body>
					<![CDATA[
						var tagsToggleDiv = this.id('tags-toggle');
						
						var labels = tagsToggleDiv.getElementsByTagName('label');
						for (var i=0; i<labels.length; i++){
							labels[i].setAttribute('selected', 'true');
							this.selection[labels[i].value] = true;
						}
						
						this.doCommand();
					]]>
				</body>
			</method>
			
			<method name="clearVisible">
				<body>
					<![CDATA[
						var tagsToggleDiv = this.id('tags-toggle');
						
						var labels = tagsToggleDiv.getElementsByTagName('label');
						for (var i=0; i<labels.length; i++){
							labels[i].setAttribute('selected', 'false');
							this.selection[labels[i].value] = false;
						}
						
						this.doCommand();
					]]>
				</body>
			</method>
			
			<method name="clearAll">
				<body>
					<![CDATA[
						this.clearVisible();
						this.selection = [];
						this.doCommand();
					]]>
				</body>
			</method>
			
			<method name="handleKeyPress">
				<parameter name="clear"/>
				<body>
					<![CDATA[
						var t = document.commandDispatcher.focusedElement;
						var textbox = t.parentNode.parentNode;
						
						textbox.firstChild.hidden = (t.value == "");
						
						if (clear != undefined){
							if (clear){
								t.value = '';
								this.setTagList(Zotero.Tags.getAll());
								return false;
							}
							else {
								return true;
							}
						}
						
						this.setTagList(Zotero.Tags.search(t.value));
						
						return true;
					]]>
				</body>
			</method>
			
			<method name="handleTagClick">
				<parameter name="label"/>
				<body>
					<![CDATA[
						// Deselect
						if (label.getAttribute('selected')=='true'){
							this.selection[label.value] = false;
							label.setAttribute('selected', 'false');
						}
						// Select
						else {
							this.selection[label.value] = true;
							label.setAttribute('selected', 'true');
						}
						this.doCommand();
					]]>
				</body>
			</method>
			
			<method name="id">
				<parameter name="id"/>
				<body>
					<![CDATA[
						return document.getAnonymousNodes(this)[0].getElementsByAttribute('id',id)[0];
					]]>
				</body>
			</method>
		</implementation>
		
		<content>
			<xul:groupbox flex="1">
					<xul:vbox id="tags-toggle" flex="1"/>
					<xul:hbox>
						<xul:label value="&zotero.tagSelector.filter;"/>
						<xul:textbox id="tags-search" flex="1" type="timed" timeout="250" dir="reverse"
							oncommand="this.parentNode.parentNode.parentNode.handleKeyPress()"
							onkeypress="this.parentNode.parentNode.parentNode.handleKeyPress(event.keyCode == event.DOM_VK_ESCAPE)">
							<xul:toolbarbutton id="search-cancel"
								oncommand="this.parentNode.focus(); this.parentNode.value='';" hidden="true"/>
						</xul:textbox>
					</xul:hbox>
					<xul:hbox>
						<xul:toolbarbutton label="&zotero.tagSelector.selectVisible;" class="zotero-clicky"
							oncommand="this.parentNode.parentNode.parentNode.selectVisible()"/>
						<xul:toolbarbutton label="&zotero.tagSelector.clearVisible;" class="zotero-clicky"
							oncommand="this.parentNode.parentNode.parentNode.clearVisible()"/>
						<xul:toolbarbutton label="&zotero.tagSelector.clearAll;" class="zotero-clicky"
							oncommand="this.parentNode.parentNode.parentNode.clearAll()"/>
					</xul:hbox>
			</xul:groupbox>
		</content>
	</binding>
</bindings>
