<?xml version="1.0"?>
<!--
    ***** BEGIN LICENSE BLOCK *****
    
    Copyright (c) 2006  Center for History and New Media
                        George Mason University, Fairfax, Virginia, USA
                        http://chnm.gmu.edu
    
    Licensed under the Educational Community License, Version 1.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
    http://www.opensource.org/licenses/ecl1.php
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    
    ***** END LICENSE BLOCK *****
-->

<!DOCTYPE bindings SYSTEM "chrome://zotero/locale/zotero.dtd">

<bindings 	xmlns="http://www.mozilla.org/xbl"
			xmlns:xbl="http://www.mozilla.org/xbl"
			xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<binding id="tags-box">
		<implementation>
			<field name="itemRef"/>
			<property name="item" onget="return this.itemRef;">
				<setter>
					<![CDATA[
						this.itemRef = val;
						this.reload();
					]]>
				</setter>
			</property>
			<property name="count"/>
			<property name="summary">
				<getter>
					<![CDATA[
						var r = "";
					
						if(this.item)
						{
							var tags = this.item.getTags();
							if(tags)
							{
								for(var i = 0; i < tags.length; i++)
								{
									r = r + tags[i].tag + ", ";
								}
								r = r.substr(0,r.length-2);
							}
						}
					
						return r;
					]]>
				</getter>
			</property>
			<method name="reload">
				<body>
					<![CDATA[
						//Zotero.debug('Reloading tags');
						
						var rows = this.id('tagRows');
						while(rows.hasChildNodes())
							rows.removeChild(rows.firstChild);
						
						var tags = this.item.getTags();
						
						if(tags)
						{
							for (var i=0; i<tags.length; i++) {
								this.addDynamicRow(tags[i], i+1);
							}
							this.updateCount(tags.length);
							
							this.fixPopup();
							
							return tags.length;
						}
						
						this.updateCount();
						return 0;
					]]>
				</body>
			</method>
			<method name="addDynamicRow">
				<parameter name="tagObj"/>
				<parameter name="tabindex"/>
				<body>
					<![CDATA[
						if (tagObj) {
							var tagID = tagObj.id;
							var tag = tagObj.tag;
							var type = tagObj.type;
						}
						if (!tag) {
							tag = '';
						}
						
						if (!tabindex)
						{
							if (this.id('tagRows').lastChild)
							{
								tabindex = parseInt(this.id('tagRows').lastChild.
									firstChild.nextSibling.getAttribute('ztabindex')) + 1;
							}
							else {
								tabindex = 1;
							}
						}
						
						var icon = document.createElement("image");
						var iconFile = 'tag';
						if (type == 0) {
							icon.setAttribute('tooltiptext', Zotero.getString('pane.item.tags.icon.user'));
						}
						else if (type == 1) {
							iconFile += '-automatic';
							icon.setAttribute('tooltiptext', Zotero.getString('pane.item.tags.icon.automatic'));
						}
						icon.setAttribute('src', 'chrome://zotero/skin/' + iconFile + '.png');
						
						// DEBUG: Why won't just this.nextSibling.blur() work?
						icon.setAttribute('onclick','if (this.nextSibling.inputField){ this.nextSibling.inputField.blur() }');
						
						var label = ZoteroItemPane.createValueElement(tag, 'tag', tabindex);
						
						var remove = document.createElement("label");
						remove.setAttribute('value','-');
						remove.setAttribute('class','zotero-clicky');
						if (tagID)
						{
							remove.setAttribute('ztabindex', -1);
							remove.setAttribute('onclick',"this.parentNode.parentNode.parentNode.parentNode.parentNode.remove('"+ tagID +"');");
						}
						else
						{
							remove.setAttribute('disabled', true);
						}
						
						var row = document.createElement("row");
						row.appendChild(icon);
						row.appendChild(label);
						row.appendChild(remove);
						
						if (tagID)
						{
							row.setAttribute('id', 'tag-' + tagID);
							row.setAttribute('tagType', type);
						}
						
						this.id('tagRows').appendChild(row);
						return row;
					]]>
				</body>
			</method>
			<method name="new">
				<body>
					<![CDATA[
						var row = this.addDynamicRow();
						row.firstChild.nextSibling.click();
					]]>
				</body>
			</method>
			<method name="add">
				<parameter name="value"/>
				<body>
					<![CDATA[
						if (value)
						{
							return this.item.addTag(value);
						}
						return false;
					]]>
				</body>
			</method>
			<method name="replace">
				<parameter name="oldTagID"/>
				<parameter name="newTag"/>
				<body>
					<![CDATA[
						if(oldTagID && newTag)
						{
							var oldTag = Zotero.Tags.getName(oldTagID);
							if (oldTag!=newTag)
							{
								return this.item.replaceTag(oldTagID, newTag);
							}
						}
						return false;
					]]>
				</body>
			</method>
			<method name="remove">
				<parameter name="id"/>
				<body>
					<![CDATA[
						this.item.removeTag(id);
					]]>
				</body>
			</method>
			<method name="updateCount">
				<parameter name="count"/>
				<body>
					<![CDATA[
						if(count == null)
						{
							var tags = this.item.getTags();
							if(tags)
								count = tags.length;
							else
								count = 0;
						}
						
						var str = 'pane.item.tags.count.';
						switch (count){
							case 0:
								str += 'zero';
								break;
							case 1:
								str += 'singular';
								break;
							default:
								str += 'plural';
								break;
						}
						
						this.id('tagsNum').value = Zotero.getString(str, [count]);
						this.count = count;
					]]>
				</body>
			</method>
			<method name="id">
				<parameter name="id"/>
				<body>
					<![CDATA[
						return document.getAnonymousNodes(this)[0].getElementsByAttribute('id',id)[0];
					]]>
				</body>
			</method>
			<method name="fixPopup">
				<body>
					<![CDATA[
						// Hack to fix popup close problems after using
						// autocomplete -- something to do with the popup used
						// in the XBL autocomplete binding?
						//
						// We reset the popup manually if it's showing
						if (this.parentNode.getAttribute('showing')=='true'){
							//Zotero.debug('Fixing popup');
							// The target element is 'tagsLabel', so change the
							// path if the XUL DOM in the note editor XBL changes
							this.parentNode.showPopup(
								this.parentNode.parentNode.previousSibling,
								-1, -1, 'popup');
						}
					]]>
				</body>
			</method>
			<method name="closePopup">
				<body>
					<![CDATA[
						if (this.parentNode.hidePopup) {
							this.parentNode.hidePopup()
						}
					]]>
				</body>
			</method>
			<method name="getScrollBox">
				<body>
					<![CDATA[
						return document.getAnonymousNodes(this)[0];
					]]>
				</body>
			</method>
		</implementation>
		<content>
			<xul:scrollbox xbl:inherits="flex" orient="vertical" style="overflow:auto">
				<xul:hbox align="center">
					<xul:label id="tagsNum"/>
					<xul:button label="&zotero.item.add;" oncommand="document.getBindingParent(this).new();"/>
				</xul:hbox>
				<xul:grid>
					<xul:columns>
						<xul:column/>
						<xul:column flex="1"/>
						<xul:column/>
					</xul:columns>
					<xul:rows id="tagRows"/>
				</xul:grid>
			</xul:scrollbox>
		</content>
	</binding>
</bindings>